{"version":3,"sources":["components/assets/profilepicture.jpg","pages/About.js","pages/Portfolio.js","pages/Contact.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","profilePicture","require","styles","textAlign","About","Row","height","Col","xs","Image","src","width","Jumbotron","fluid","style","Container","Portfolio","Contact","Header","Navbar","bg","variant","expand","to","Brand","Nav","className","Link","padding","backgroundColor","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,4C,mICOrCC,EAAiBC,EAAQ,IAEzBC,EAAS,CACbC,UAAW,UA8BEC,MA3Bf,WACE,OACE,6BACI,kBAACC,EAAA,EAAD,CAAKC,OAAQ,OACX,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAOC,IAAKV,EAAgBW,MAAO,UAErC,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACI,EAAA,EAAD,CAAWC,OAAK,GACd,wBAAIC,MAAOZ,GAAX,gCACA,kBAACa,EAAA,EAAD,KACE,qOAIE,6BAAS,6BAJX,gIAKE,6BAAS,6BALX,oNClBDC,MAJf,WACE,OAAO,yCCGMC,MAJf,WACE,OAAO,uC,wBCmBMC,MAhBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAAC,OAAD,CAAMC,GAAG,KACP,kBAACJ,EAAA,EAAOK,MAAR,uBAIF,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,gBAAD,CAAeH,GAAG,cAAa,kBAACE,EAAA,EAAIE,KAAL,mBAC/B,kBAAC,gBAAD,CAAeJ,GAAG,YAAW,kBAACE,EAAA,EAAIE,KAAL,yBCd/Bb,EAAQ,CACZX,UAAW,SACXyB,QAAS,QACTC,gBAAiB,WACjBlB,MAAO,QAaMmB,MAVf,WACE,OACE,6BACE,4BAAQhB,MAAOA,GACb,gDCSOiB,MAdf,WACE,OACE,kBAAC,gBAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,aAAaC,UAAWlB,IAC1C,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,WAAWC,UAAWjB,IACxC,kBAAC,EAAD,SCJYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41857f44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepicture.3e3fa801.jpg\";","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nconst profilePicture = require('../components/assets/profilepicture.jpg');\r\n\r\nconst styles = {\r\n  textAlign: 'center'\r\n};\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n        <Row height={'85%'}>\r\n          <Col xs={4}>\r\n            <Image src={profilePicture} width={'100%'}/>\r\n          </Col>\r\n          <Col xs={8}>\r\n            <Jumbotron fluid>\r\n              <h1 style={styles}>Anthony Smith, Web Developer</h1>\r\n              <Container>\r\n                <p>\r\n                  Hello, my name is Anthony Smith. I have been a web developer for 6 months. I have learned many popular technologies including: HTML, CSS, Javascript, jQuery, Node, mySQL,\r\n                  Express, MongoDB, and React.\r\n\r\n                  <br></br><br></br>I am currently employed at Amazon where I am fortunate enough to be able to continue developing my skills in web development.\r\n                  <br></br><br></br>Outside of work, I am continuously looking for opportunities to design and implement websites. Projects currently under development indlude a fully functional photography website for my girlfriend Tori,\r\n\r\n                </p>\r\n              </Container>\r\n            </Jumbotron>\r\n          </Col>\r\n        </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\nfunction Portfolio() {\r\n  return <p>Portfolio</p>\r\n}\r\n\r\nexport default Portfolio;","import React from 'react';\r\n\r\nfunction Contact() {\r\n  return <p>Contact</p>\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nfunction Header() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n      <Link to=\"/\">\r\n        <Navbar.Brand>\r\n          Anthony Smith\r\n        </Navbar.Brand>\r\n      </Link>\r\n      <Nav className=\"mr-auto\">\r\n        <LinkContainer to='/portfolio'><Nav.Link>Portfolio</Nav.Link></LinkContainer>\r\n        <LinkContainer to='/contact'><Nav.Link>Get In Touch</Nav.Link></LinkContainer>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst style = {\r\n  textAlign: \"center\",\r\n  padding: \".5rem\",\r\n  backgroundColor: \"darkgrey\",\r\n  width: \"auto\"\r\n};\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div>\r\n      <footer style={style}>\r\n        <p>fooooooooooots</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport About from './pages/About';\r\nimport Portfolio from './pages/Portfolio';\r\nimport Contact from './pages/Contact';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Header />\r\n        <Route exact path='/' component={About} />\r\n        <Route exact path='/portfolio' component={Portfolio} />\r\n        <Route exact path='/contact' component={Contact} />\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}