{"version":3,"sources":["components/assets/profilepicture.jpg","pages/About.js","pages/Portfolio.js","pages/Contact.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","profilePicture","require","About","Row","Col","xs","Jumbotron","fluid","height","lg","Image","src","Portfolio","Contact","Header","Navbar","bg","variant","expand","to","Brand","Nav","className","Link","style","textAlign","padding","backgroundColor","width","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,4C,2HCQrCC,G,MAAiBC,EAAQ,KAwChBC,MArCf,WACE,OACE,6BACI,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,+DAIN,kBAACJ,EAAA,EAAD,CAAKK,OAAQ,OACX,kBAACJ,EAAA,EAAD,CAAKK,GAAI,IAEH,kBAACC,EAAA,EAAD,CAAOC,IAAKX,EAAgBO,OAAK,IACjC,sOAKA,4JAIA,gQAIA,utBChCDK,MAJf,WACE,OAAO,yCCGMC,MAJf,WACE,OAAO,uC,wBCmBMC,MAhBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAAC,OAAD,CAAMC,GAAG,KACP,kBAACJ,EAAA,EAAOK,MAAR,uBAIF,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,gBAAD,CAAeH,GAAG,cAAa,kBAACE,EAAA,EAAIE,KAAL,mBAC/B,kBAAC,gBAAD,CAAeJ,GAAG,YAAW,kBAACE,EAAA,EAAIE,KAAL,yBCd/BC,EAAQ,CACZC,UAAW,SACXC,QAAS,QACTC,gBAAiB,WACjBC,MAAO,QAaMC,MAVf,WACE,OACE,6BACE,4BAAQL,MAAOA,GACb,gDCSOM,MAdf,WACE,OACE,kBAAC,gBAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IACjC,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,aAAaC,UAAWrB,IAC1C,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,WAAWC,UAAWpB,IACxC,kBAAC,EAAD,SCJYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d14ac8a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepicture.3e3fa801.jpg\";","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { Jumbotron } from 'react-bootstrap';\nimport \"./About.css\";\n\nconst profilePicture = require('../components/assets/profilepicture.jpg');\n\n\nfunction About() {\n  return (\n    <div>\n        <Row>\n          <Col xs={12}>\n            <Jumbotron fluid>\n              <h1 >Anthony Smith, Web Developer</h1>\n            </Jumbotron>\n          </Col>\n        </Row>\n        <Row height={'90%'}>\n          <Col lg={12}>\n            \n                <Image src={profilePicture} fluid/>\n                <p>\n                Hello, my name is Anthony Smith. I have been a web developer for 6 months. I have learned many popular technologies including: HTML, CSS, Javascript, jQuery, Node, mySQL,\n                Express, MongoDB, and React.\n                </p>\n\n                <p>\n                I am currently employed at Amazon where I am fortunate enough to be able to continue developing my skills in web development.\n                </p>\n\n                <p>\n                Outside of work, I am continuously looking for opportunities to design and implement websites. Projects currently under development indlude fully functional photography websites for my girlfriend Tori and best friend Lindsey.\n                </p>\n\n                <p>\n                  Upon the completion of this Bootcamp, I will begin working on functional web tools for my team at Amazon. These tools will not only increase our teams efficiency, but more importantly, the data, quality trends, and associate tracking will be much better. I am very excited to embark on this project as the technologies learned in this course are just the beginning.\n                  Effective web tools at Amazon are deployed with AWS and together with Python and Javascript, are extremely powerful. In addition to the capabilities of these tools, I intend on bringing some flare and design to otherwise boring looking web tools. The users will feel less like drones with some beauty in their day to day work.\n                </p>\n          </Col>\n        </Row>\n    </div>\n  );\n}\n\nexport default About;","import React from 'react';\n\nfunction Portfolio() {\n  return <p>Portfolio</p>\n}\n\nexport default Portfolio;","import React from 'react';\n\nfunction Contact() {\n  return <p>Contact</p>\n}\n\nexport default Contact;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Nav } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Link to=\"/\">\n        <Navbar.Brand>\n          Anthony Smith\n        </Navbar.Brand>\n      </Link>\n      <Nav className=\"mr-auto\">\n        <LinkContainer to='/portfolio'><Nav.Link>Portfolio</Nav.Link></LinkContainer>\n        <LinkContainer to='/contact'><Nav.Link>Get In Touch</Nav.Link></LinkContainer>\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default Header;","import React from 'react';\n\nconst style = {\n  textAlign: \"center\",\n  padding: \".5rem\",\n  backgroundColor: \"darkgrey\",\n  width: \"auto\"\n};\n\nfunction Footer() {\n  return (\n    <div>\n      <footer style={style}>\n        <p>fooooooooooots</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\nimport About from './pages/About';\nimport Portfolio from './pages/Portfolio';\nimport Contact from './pages/Contact';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Route exact path='/' component={About} />\n        <Route exact path='/portfolio' component={Portfolio} />\n        <Route exact path='/contact' component={Contact} />\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}